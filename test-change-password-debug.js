const axios = require('axios');
const bcrypt = require('bcrypt');

// Configuraci√≥n
const BASE_URL = 'http://localhost:3001/api'; // Ajusta seg√∫n tu configuraci√≥n

// Script para debuggear el endpoint de cambio de contrase√±a
async function debugChangePassword() {
    console.log('üîç DEBUG DEL ENDPOINT CHANGE-PASSWORD\n');
    
    // Datos de prueba - CAMBIA ESTOS VALORES
    const testData = {
        id_usuario: 3,
        contrasenaActual: 'Losiento321', // La que S√ç funciona en login
        nuevaContrasena: 'nuevaPassword123!'
    };
    
    console.log('üìã Datos de prueba:');
    console.log(`   üÜî ID Usuario: ${testData.id_usuario}`);
    console.log(`   üîë Contrase√±a actual: "${testData.contrasenaActual}"`);
    console.log(`   üÜï Nueva contrase√±a: "${testData.nuevaContrasena}"`);
    console.log('');
    
    try {
        // 1. Primero probar el login para confirmar que la contrase√±a funciona
        console.log('üîê 1. Probando LOGIN para confirmar que la contrase√±a es correcta...');
        
        try {
            const loginResponse = await axios.post(`${BASE_URL}/users/users_login`, {
                correo: 'nathy.zelaya5@gmail.com', // Cambia por el correo correcto
                contrasena: testData.contrasenaActual
            });
            
            console.log('‚úÖ LOGIN exitoso:');
            console.log(`   üìä Status: ${loginResponse.status}`);
            console.log(`   üì¶ Response:`, loginResponse.data);
            console.log('');
            
        } catch (loginError) {
            console.log('‚ùå LOGIN fall√≥:');
            console.log(`   üìä Status: ${loginError.response?.status}`);
            console.log(`   üì¶ Error:`, loginError.response?.data);
            console.log('‚ö†Ô∏è  Si el login falla, confirma que la contrase√±a es correcta');
            console.log('');
        }
        
        // 2. Ahora probar el endpoint de cambio de contrase√±a
        console.log('üîÑ 2. Probando CHANGE-PASSWORD...');
        
        const changeResponse = await axios.put(`${BASE_URL}/auth/change-password`, testData);
        
        console.log('‚úÖ CHANGE-PASSWORD exitoso:');
        console.log(`   üìä Status: ${changeResponse.status}`);
        console.log(`   üì¶ Response:`, changeResponse.data);
        
    } catch (error) {
        console.log('‚ùå CHANGE-PASSWORD fall√≥:');
        console.log(`   üìä Status: ${error.response?.status}`);
        console.log(`   üì¶ Error:`, error.response?.data);
        
        // An√°lisis detallado del error
        console.log('\nüîç AN√ÅLISIS DEL ERROR:');
        
        if (error.response?.status === 401) {
            console.log('‚ùå Error 401: La contrase√±a actual es incorrecta');
            console.log('üí° Posibles causas:');
            console.log('   1. El hash en la BD es diferente al usado en login');
            console.log('   2. Hay espacios extras en la contrase√±a');
            console.log('   3. Problema en la comparaci√≥n bcrypt en changePassword');
            console.log('   4. El usuario ID no coincide');
            
        } else if (error.response?.status === 404) {
            console.log('‚ùå Error 404: Usuario no encontrado');
            console.log('üí° Verifica que el ID del usuario sea correcto');
            
        } else if (error.response?.status === 400) {
            console.log('‚ùå Error 400: Datos inv√°lidos');
            console.log('üí° Revisa que todos los campos est√©n presentes');
            
        } else {
            console.log('‚ùå Error desconocido');
        }
        
        // 3. Investigaci√≥n adicional: comparar manualmente
        console.log('\nüß™ 3. COMPARACI√ìN MANUAL DE HASHES...');
        
        try {
            // Obtener el hash de la BD manualmente
            const pool = require('./config/db');
            
            pool.query(
                'SELECT id_usuario, nombre, correo, contrasena FROM usuarios WHERE id_usuario = ?',
                [testData.id_usuario],
                async (err, results) => {
                    if (err) {
                        console.error('‚ùå Error consultando BD:', err);
                        return;
                    }
                    
                    if (results.length === 0) {
                        console.log('‚ùå Usuario no encontrado en BD');
                        return;
                    }
                    
                    const user = results[0];
                    console.log('üìä Datos del usuario en BD:');
                    console.log(`   üÜî ID: ${user.id_usuario}`);
                    console.log(`   üë§ Nombre: ${user.nombre}`);
                    console.log(`   üìß Correo: ${user.correo}`);
                    console.log(`   üîê Hash: ${user.contrasena}`);
                    
                    // Comparaci√≥n manual
                    console.log('\nüîç Comparaci√≥n manual con bcrypt:');
                    try {
                        const manualMatch = await bcrypt.compare(testData.contrasenaActual, user.contrasena);
                        console.log(`   üîÑ bcrypt.compare("${testData.contrasenaActual}", hash) = ${manualMatch}`);
                        
                        if (manualMatch) {
                            console.log('‚úÖ La comparaci√≥n manual S√ç funciona');
                            console.log('üí° El problema est√° en el c√≥digo del endpoint changePassword');
                        } else {
                            console.log('‚ùå La comparaci√≥n manual NO funciona');
                            console.log('üí° Hay una diferencia entre el hash del login y del changePassword');
                        }
                        
                    } catch (bcryptError) {
                        console.error('‚ùå Error en comparaci√≥n manual:', bcryptError);
                    }
                    
                    process.exit(0);
                }
            );
            
        } catch (dbError) {
            console.error('‚ùå Error accediendo a la BD:', dbError);
            process.exit(1);
        }
    }
}

// Funci√≥n adicional para probar con datos diferentes
async function testWithDifferentData() {
    console.log('\nüîÑ PROBANDO CON DATOS ALTERNATIVOS...\n');
    
    const alternativeTests = [
        {
            name: 'Con espacios removidos',
            data: {
                id_usuario: 3,
                contrasenaActual: 'Losiento321'.trim(),
                nuevaContrasena: 'nuevaPassword123!'
            }
        },
        {
            name: 'Con ID como string',
            data: {
                id_usuario: '3',
                contrasenaActual: 'Losiento321',
                nuevaContrasena: 'nuevaPassword123!'
            }
        },
        {
            name: 'Con nueva contrase√±a diferente',
            data: {
                id_usuario: 3,
                contrasenaActual: 'Losiento321',
                nuevaContrasena: 'otraPassword456!'
            }
        }
    ];
    
    for (const test of alternativeTests) {
        console.log(`üß™ Probando: ${test.name}`);
        
        try {
            const response = await axios.put(`${BASE_URL}/auth/change-password`, test.data);
            console.log(`‚úÖ ${test.name} - √âXITO:`, response.data);
            break; // Si uno funciona, no probar m√°s
            
        } catch (error) {
            console.log(`‚ùå ${test.name} - FALL√ì:`, error.response?.data?.message || error.message);
        }
        
        console.log('');
    }
}

// Ejecutar diagn√≥stico
console.log('üöÄ Iniciando diagn√≥stico de change-password...\n');
debugChangePassword().catch(error => {
    console.error('‚ùå Error en diagn√≥stico:', error.message);
    process.exit(1);
});
