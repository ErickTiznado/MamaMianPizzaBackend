// test-wompi-debug.js
// Script de prueba para verificar la depuraci√≥n completa del sistema de pagos Wompi

const axios = require('axios');

// Configuraci√≥n
const BASE_URL = 'http://localhost:3000'; // Ajusta seg√∫n tu configuraci√≥n
const ENDPOINT = '/api/payments/process-order';

// Datos de prueba que siguen la misma l√≥gica del script original
const testPaymentData = {
    // Datos de la tarjeta (exactos del script de referencia)
    numeroTarjeta: '4573690001990693',
    cvv: '835',
    mesVencimiento: 12,
    anioVencimiento: 2029,
    
    // Datos del cliente (exactos del script de referencia)
    nombre: 'Erick',
    apellido: 'Tiznado',
    email: 'tiznadoerick3@gmail.com',
    telefono: '50300000000',
    direccionPago: 'Tu Direcci√≥n 123',
    ciudad: 'San Salvador',
    idPais: 'SV',
    idRegion: 'SV-SS',
    codigoPostal: '1101',
    
    // Datos del pedido
    pedidoData: {
        tipo_cliente: 'invitado',
        cliente: {
            nombre: 'Erick',
            apellido: 'Tiznado',
            telefono: '50300000000',
            email: 'tiznadoerick3@gmail.com'
        },
        direccion: {
            tipo_direccion: 'formulario',
            direccion: 'Tu Direcci√≥n 123',
            pais: 'El Salvador',
            departamento: 'San Salvador',
            municipio: 'San Salvador',
            codigo_postal: '1101',
            instrucciones_entrega: 'Casa de prueba'
        },
        productos: [
            {
                id_producto: 1,
                nombre_producto: 'Pizza Margarita',
                cantidad: 1,
                precio_unitario: 4.00,
                subtotal: 4.00
            }
        ],
        subtotal: 4.00,
        costo_envio: 0.00,
        impuestos: 0.00,
        total: 4.00,
        aceptado_terminos: true,
        tiempo_estimado_entrega: 30
    }
};

/**
 * Funci√≥n principal para probar la depuraci√≥n
 */
async function testWompiDebug() {
    console.log('\nüß™ ===== INICIANDO PRUEBA DE DEPURACI√ìN WOMPI =====');
    console.log(`üîó URL: ${BASE_URL}${ENDPOINT}`);
    console.log(`üí∞ Monto: $${testPaymentData.pedidoData.total}`);
    console.log(`üí≥ Tarjeta: ****-****-****-${testPaymentData.numeroTarjeta.slice(-4)}`);
    console.log(`üë§ Cliente: ${testPaymentData.nombre} ${testPaymentData.apellido}`);
    console.log(`üìß Email: ${testPaymentData.email}`);
    console.log(`üì± Tel√©fono: ${testPaymentData.telefono}`);
    
    try {
        console.log('\nüì§ Enviando petici√≥n al backend...');
        console.log('üîç Revisa la consola del servidor para ver la depuraci√≥n completa');
        
        const startTime = Date.now();
        
        const response = await axios.post(`${BASE_URL}${ENDPOINT}`, testPaymentData, {
            headers: {
                'Content-Type': 'application/json'
            },
            timeout: 60000 // 60 segundos para ver toda la depuraci√≥n
        });
        
        const endTime = Date.now();
        const responseTime = endTime - startTime;
        
        console.log(`\n‚úÖ ===== RESPUESTA EXITOSA (${responseTime}ms) =====`);
        console.log(`üìä Status: ${response.status}`);
        
        if (response.data.success) {
            console.log('\nüéâ ===== PROCESO COMPLETADO EXITOSAMENTE =====');
            console.log(`üí≥ Transaction ID: ${response.data.data.transactionId}`);
            console.log(`üîó URL Wompi 3DS: ${response.data.data.urlPago}`);
            console.log(`üìã C√≥digo del pedido: ${response.data.data.pedido.codigo}`);
            console.log(`üçï Estado del pedido: ${response.data.data.pedido.estado}`);
            console.log(`üí∞ Total: $${response.data.data.pedido.total}`);
            
            console.log('\nüìã ===== INFORMACI√ìN DE DEPURACI√ìN =====');
            console.log('‚úÖ Autenticaci√≥n OAuth: Revisa los logs del servidor para ver el proceso completo');
            console.log('‚úÖ Creaci√≥n de transacci√≥n 3DS: Revisa los logs del servidor para ver el payload y respuesta');
            console.log('‚úÖ Creaci√≥n de pedido: Revisa los logs del servidor para ver el proceso de BD');
            console.log('‚úÖ Vinculaci√≥n: Revisa los logs del servidor para ver c√≥mo se vinculan transacci√≥n y pedido');
            
            console.log('\nüîó ===== PR√ìXIMOS PASOS =====');
            console.log(`1. Abre esta URL en tu navegador para completar el pago 3DS:`);
            console.log(`   ${response.data.data.urlPago}`);
            console.log(`2. Completa la autenticaci√≥n 3DS`);
            console.log(`3. El sistema te redirigir√° a: ${process.env.WOMPI_REDIRECT_URL || 'https://mamamianpizza.com/confirmacion'}`);
            
        } else {
            console.log('\n‚ùå ===== ERROR EN LA RESPUESTA =====');
            console.log(`üìù Mensaje: ${response.data.message}`);
            console.log(`üîç Error: ${response.data.error}`);
            console.log('üìã Revisa los logs del servidor para ver los detalles de depuraci√≥n');
        }
        
        console.log('\nüìä ===== DATOS COMPLETOS DE RESPUESTA =====');
        console.log(JSON.stringify(response.data, null, 2));
        
    } catch (error) {
        console.error('\n‚ùå ===== ERROR EN LA PETICI√ìN =====');
        
        if (error.response) {
            console.error(`üìä Status: ${error.response.status}`);
            console.error(`üìù Mensaje: ${error.response.data?.message || 'Error desconocido'}`);
            console.error(`üîç Error: ${error.response.data?.error || 'Sin detalles'}`);
            console.error(`üÜî Request ID: ${error.response.data?.requestId || 'No disponible'}`);
            
            console.error('\nüìã Datos completos del error:');
            console.error(JSON.stringify(error.response.data, null, 2));
            
        } else if (error.request) {
            console.error('üåê Error de red - no se recibi√≥ respuesta');
            console.error('üîç Detalles:', error.message);
            console.error('üí° Verifica que el servidor est√© ejecut√°ndose en:', BASE_URL);
            
        } else {
            console.error('‚öôÔ∏è Error de configuraci√≥n:', error.message);
        }
        
        console.log('\nüìã ===== CONSEJOS DE DEPURACI√ìN =====');
        console.log('1. üîç Revisa la consola del servidor para ver los logs detallados de Wompi');
        console.log('2. üîë Verifica que las variables de entorno de Wompi est√©n configuradas');
        console.log('3. üåê Aseg√∫rate de que el servidor est√© ejecut√°ndose');
        console.log('4. üìä Revisa que la base de datos est√© conectada');
        console.log('5. üí≥ Verifica que las credenciales de Wompi sean v√°lidas');
    }
}

/**
 * Funci√≥n para mostrar informaci√≥n de configuraci√≥n
 */
function showConfig() {
    console.log('\n‚öôÔ∏è ===== CONFIGURACI√ìN DE PRUEBA =====');
    console.log(`üîó Base URL: ${BASE_URL}`);
    console.log(`üìç Endpoint: ${ENDPOINT}`);
    console.log(`üí≥ Tarjeta de prueba: 4573690001990693 (Wompi test card)`);
    console.log(`üîí CVV: 835`);
    console.log(`üìÖ Vencimiento: 12/2029`);
    console.log(`üë§ Cliente de prueba: Erick Tiznado`);
    console.log(`üí∞ Monto de prueba: $4.00`);
    
    console.log('\nüìã ===== VARIABLES DE ENTORNO REQUERIDAS =====');
    console.log('WOMPI_CLIENT_ID=116288d1-10ee-47c4-8969-a7fd0c671c40');
    console.log('WOMPI_CLIENT_SECRET=249aca7c-8a8f-48ca-acda-a28d4a9ea0fc');
    console.log('WOMPI_REDIRECT_URL=https://mamamianpizza.com/confirmacion');
    
    console.log('\nüéØ ===== QU√â ESPERAR EN LOS LOGS =====');
    console.log('‚úÖ Logs de autenticaci√≥n OAuth con Wompi');
    console.log('‚úÖ Logs de construcci√≥n del payload 3DS');
    console.log('‚úÖ Logs de respuesta de Wompi con URL 3DS');
    console.log('‚úÖ Logs de creaci√≥n del pedido en BD');
    console.log('‚úÖ Logs de vinculaci√≥n transacci√≥n-pedido');
    console.log('‚úÖ Tiempos de respuesta y request IDs para trazabilidad');
}

// Ejecutar la prueba
if (require.main === module) {
    showConfig();
    
    setTimeout(() => {
        testWompiDebug()
            .then(() => {
                console.log('\nüèÅ ===== PRUEBA DE DEPURACI√ìN COMPLETADA =====');
                console.log('üìã Revisa la consola del servidor para ver todos los logs de depuraci√≥n');
                process.exit(0);
            })
            .catch((error) => {
                console.error('\nüí• ===== ERROR CR√çTICO =====');
                console.error(error);
                process.exit(1);
            });
    }, 1000);
}

module.exports = { testWompiDebug, testPaymentData };
