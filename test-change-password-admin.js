const axios = require('axios');

// Configuraci√≥n del servidor
const BASE_URL = 'http://localhost:3000/api'; // Ajusta seg√∫n tu configuraci√≥n

// ================================================================
// SCRIPT DE PRUEBA PARA CAMBIO DE CONTRASE√ëA DE ADMINISTRADORES
// ================================================================

// Funci√≥n para probar cambio de contrase√±a de administrador
async function testChangePasswordAdmin() {
    console.log('üß™ Iniciando pruebas del cambio de contrase√±a para ADMINISTRADORES...\n');

    try {
        // Datos de prueba - CAMBIA ESTOS VALORES POR DATOS REALES
        const datosAdmin = {
            correo: 'admin@mamamianpizza.com', // Cambia por un correo que exista en tu tabla administradores
            contrasenaActual: 'adminPassword123!', // La contrase√±a actual del admin
            nuevaContrasena: 'newAdminPassword456@' // La nueva contrase√±a que quieres establecer
        };

        console.log('üîê Cambiando contrase√±a de administrador...');
        console.log(`üìß Admin: ${datosAdmin.correo}`);
        
        const response = await axios.put(`${BASE_URL}/auth/admin/change-password`, datosAdmin);

        console.log('‚úÖ Respuesta exitosa:', response.data);
        console.log('\nüéâ ¬°Cambio de contrase√±a de ADMINISTRADOR completado exitosamente!');
        console.log('\nüìä DETALLES DE LA OPERACI√ìN:');
        console.log(`   üë§ Administrador: ${response.data.administrador.nombre}`);
        console.log(`   üìß Correo: ${response.data.administrador.correo}`);
        console.log(`   üïí Timestamp: ${response.data.timestamp}`);
        console.log(`   üìß Confirmaci√≥n: ${response.data.correo_confirmacion}`);

    } catch (error) {
        console.error('‚ùå Error en la prueba de cambio de contrase√±a de ADMINISTRADOR:');
        if (error.response) {
            console.error('Status:', error.response.status);
            console.error('Data:', error.response.data);
            
            // Mensajes espec√≠ficos seg√∫n el error
            switch (error.response.status) {
                case 400:
                    console.error('\nüí° SUGERENCIAS:');
                    console.error('   ‚Ä¢ Verifica que todos los campos est√©n presentes');
                    console.error('   ‚Ä¢ La nueva contrase√±a debe tener al menos 8 caracteres');
                    console.error('   ‚Ä¢ La nueva contrase√±a debe ser diferente a la actual');
                    break;
                case 401:
                    console.error('\nüí° SUGERENCIAS:');
                    console.error('   ‚Ä¢ Verifica que la contrase√±a actual sea correcta');
                    break;
                case 404:
                    console.error('\nüí° SUGERENCIAS:');
                    console.error('   ‚Ä¢ Verifica que el correo del administrador exista en la base de datos');
                    console.error('   ‚Ä¢ Aseg√∫rate de usar un correo v√°lido de la tabla administradores');
                    break;
                case 500:
                    console.error('\nüí° SUGERENCIAS:');
                    console.error('   ‚Ä¢ Verifica la conexi√≥n a la base de datos');
                    console.error('   ‚Ä¢ Revisa los logs del servidor para m√°s detalles');
                    break;
            }
        } else {
            console.error('Error:', error.message);
            console.error('\nüí° SUGERENCIAS:');
            console.error('   ‚Ä¢ Verifica que el servidor est√© ejecut√°ndose en el puerto correcto');
            console.error('   ‚Ä¢ Aseg√∫rate de que la URL base sea correcta');
        }
    }
}

// Funci√≥n para probar validaciones espec√≠ficas de admin
async function testAdminChangePasswordValidations() {
    console.log('üîç Probando validaciones espec√≠ficas de cambio de contrase√±a ADMIN...\n');

    const tests = [
        {
            name: 'ID de admin faltante',
            data: {
                contrasenaActual: 'adminPassword123',
                nuevaContrasena: 'nuevaAdminPassword123!'
            }
        },
        {
            name: 'Contrase√±a actual faltante',
            data: {
                id_admin: 1,
                nuevaContrasena: 'nuevaAdminPassword123!'
            }
        },
        {
            name: 'Nueva contrase√±a faltante',
            data: {
                id_admin: 1,
                contrasenaActual: 'adminPassword123'
            }
        },
        {
            name: 'Nueva contrase√±a muy corta',
            data: {
                id_admin: 1,
                contrasenaActual: 'adminPassword123',
                nuevaContrasena: '123'
            }
        },
        {
            name: 'ID de admin no existe',
            data: {
                id_admin: 99999,
                contrasenaActual: 'adminPassword123',
                nuevaContrasena: 'nuevaAdminPassword123!'
            }
        },
        {
            name: 'Contrase√±a actual incorrecta',
            data: {
                id_admin: 1,
                contrasenaActual: 'contrase√±aIncorrecta',
                nuevaContrasena: 'nuevaAdminPassword123!'
            }
        },
        {
            name: 'Nueva contrase√±a igual a la actual',
            data: {
                id_admin: 1,
                contrasenaActual: 'adminPassword123',
                nuevaContrasena: 'adminPassword123' // Misma contrase√±a
            }
        }
    ];

    for (const test of tests) {
        try {
            console.log(`üß™ Probando: ${test.name}`);
            const response = await axios.put(`${BASE_URL}/auth/admin/change-password`, test.data);
            console.log(`‚úÖ Respuesta inesperada: ${response.status}`);
            console.log(JSON.stringify(response.data, null, 2));
        } catch (error) {
            console.log(`‚ùå Error esperado: ${error.response?.status} - ${error.response?.data?.message}`);
        }
        console.log('');
    }
}

// Funci√≥n para mostrar caracter√≠sticas del sistema
function showAdminChangePasswordFeatures() {
    console.log('üìã CARACTER√çSTICAS DEL CAMBIO DE CONTRASE√ëA PARA ADMINISTRADORES:\n');
    
    console.log('üîó ENDPOINT:');
    console.log('   PUT /auth/admin/change-password\n');
    
    console.log('üìù DATOS REQUERIDOS:');
    console.log('   ‚Ä¢ id_admin: ID del administrador');
    console.log('   ‚Ä¢ contrasenaActual: Contrase√±a actual');
    console.log('   ‚Ä¢ nuevaContrasena: Nueva contrase√±a (min 8 caracteres)\n');
    
    console.log('üîí VALIDACIONES:');
    console.log('   ‚Ä¢ Administrador debe existir en tabla "administradores"');
    console.log('   ‚Ä¢ Contrase√±a actual debe ser correcta');
    console.log('   ‚Ä¢ Nueva contrase√±a min 8 caracteres');
    console.log('   ‚Ä¢ Nueva contrase√±a debe ser diferente a la actual');
    console.log('   ‚Ä¢ Encriptaci√≥n con saltRounds: 12 (mayor seguridad)\n');
    
    console.log('üìß CORREO DE CONFIRMACI√ìN:');
    console.log('   ‚Ä¢ Template espec√≠fico para administradores');
    console.log('   ‚Ä¢ Subject: "‚úÖ Contrase√±a Admin Actualizada"');
    console.log('   ‚Ä¢ Colores corporativos (marr√≥n/dorado)');
    console.log('   ‚Ä¢ Warnings de seguridad adicionales\n');
    
    console.log('üé® DIFERENCIAS CON USUARIOS:');
    console.log('   ‚Ä¢ Tabla: administradores (no usuarios)');
    console.log('   ‚Ä¢ Mayor encriptaci√≥n (saltRounds: 12 vs 10)');
    console.log('   ‚Ä¢ Templates de correo espec√≠ficos');
    console.log('   ‚Ä¢ Validaciones espec√≠ficas de admin\n');
    
    console.log('‚úÖ RESPUESTA EXITOSA:');
    console.log('   ‚Ä¢ success: true');
    console.log('   ‚Ä¢ message: Confirmaci√≥n de cambio');
    console.log('   ‚Ä¢ administrador: Nombre del admin');
    console.log('   ‚Ä¢ timestamp: Fecha y hora del cambio');
    console.log('   ‚Ä¢ correo_confirmacion: Estado del env√≠o');
    console.log('   ‚Ä¢ tipo_usuario: "administrador"\n');
}

// Funci√≥n para comparar user vs admin
function showUserVsAdminComparison() {
    console.log('üìä COMPARACI√ìN: USUARIO VS ADMINISTRADOR\n');
    
    console.log('| Caracter√≠stica | Usuario | Administrador |');
    console.log('|----------------|---------|---------------|');
    console.log('| **Endpoint** | `/auth/change-password` | `/auth/admin/change-password` |');
    console.log('| **Campo ID** | `id_usuario` | `id_admin` |');
    console.log('| **Tabla BD** | `usuarios` | `administradores` |');
    console.log('| **saltRounds** | `10` | `12` |');
    console.log('| **Template** | Usuario est√°ndar | Admin corporativo |');
    console.log('| **Colores** | Naranja/Rojo | Marr√≥n/Dorado |');
    console.log('| **Subject** | "Contrase√±a Actualizada" | "Contrase√±a Admin Actualizada" |');
    console.log('| **Seguridad** | Est√°ndar | Reforzada |\n');
}

// Funci√≥n principal
async function main() {
    const args = process.argv.slice(2);
    
    if (args.includes('--test')) {
        await testChangePasswordAdmin();
    } else if (args.includes('--validations')) {
        await testAdminChangePasswordValidations();
    } else if (args.includes('--compare')) {
        showUserVsAdminComparison();
    } else if (args.includes('--features')) {
        showAdminChangePasswordFeatures();
    } else {
        console.log('üß™ SCRIPT DE PRUEBAS - CAMBIO DE CONTRASE√ëA ADMIN - MAMA MIAN PIZZA\n');
        console.log('Uso:');
        console.log('  node test-change-password-admin.js --test         # Probar cambio exitoso');
        console.log('  node test-change-password-admin.js --validations  # Probar validaciones');
        console.log('  node test-change-password-admin.js --compare      # Comparar user vs admin');
        console.log('  node test-change-password-admin.js --features     # Mostrar caracter√≠sticas');
        console.log('\nPor defecto, muestra las caracter√≠sticas del sistema.');
        console.log('');
        showAdminChangePasswordFeatures();
    }
}

// Ejecutar el script
main().catch(console.error);
