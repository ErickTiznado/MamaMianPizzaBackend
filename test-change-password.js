// Test script para probar el endpoint de cambio de contrase√±a
const axios = require('axios');

const BASE_URL = 'http://localhost:3001'; // Ajusta seg√∫n tu puerto

// Funci√≥n para probar cambio de contrase√±a de usuario
async function testChangePasswordUser() {
    console.log('üß™ Probando cambio de contrase√±a para USUARIO...\n');

    try {
        const response = await axios.put(`${BASE_URL}/auth/change-password`, {
            id_usuario: 1, // Cambia por un ID v√°lido
            contrasenaActual: 'password123', // Contrase√±a actual del usuario
            nuevaContrasena: 'nuevaPassword123!'
        });

        console.log('‚úÖ Contrase√±a de usuario cambiada exitosamente:');
        console.log(response.data);
    } catch (error) {
        console.error('‚ùå Error:', error.response?.data || error.message);
    }
}

// Funci√≥n para probar cambio de contrase√±a de administrador
async function testChangePasswordAdmin() {
    console.log('üß™ Probando cambio de contrase√±a para ADMINISTRADOR...\n');

    try {
        const response = await axios.put(`${BASE_URL}/auth/admin/change-password`, {
            id_admin: 1, // Cambia por un ID v√°lido
            contrasenaActual: 'adminPassword123', // Contrase√±a actual del admin
            nuevaContrasena: 'nuevaAdminPassword123!'
        });

        console.log('‚úÖ Contrase√±a de administrador cambiada exitosamente:');
        console.log(response.data);
    } catch (error) {
        console.error('‚ùå Error:', error.response?.data || error.message);
    }
}

// Funci√≥n para probar validaciones
async function testValidations() {
    console.log('üîç Probando validaciones...\n');

    const tests = [
        {
            name: 'Contrase√±a actual incorrecta',
            endpoint: '/auth/change-password',
            data: {
                id_usuario: 1,
                contrasenaActual: 'passwordIncorrecta',
                nuevaContrasena: 'nuevaPassword123!'
            }
        },
        {
            name: 'Nueva contrase√±a muy corta',
            endpoint: '/auth/change-password',
            data: {
                id_usuario: 1,
                contrasenaActual: 'password123',
                nuevaContrasena: '123'
            }
        },
        {
            name: 'Nueva contrase√±a igual a la actual',
            endpoint: '/auth/change-password',
            data: {
                id_usuario: 1,
                contrasenaActual: 'password123',
                nuevaContrasena: 'password123'
            }
        },
        {
            name: 'Campos faltantes',
            endpoint: '/auth/change-password',
            data: {
                id_usuario: 1
            }
        }
    ];

    for (const test of tests) {
        try {
            console.log(`üß™ Probando: ${test.name}`);
            const response = await axios.put(`${BASE_URL}${test.endpoint}`, test.data);
            console.log(`‚úÖ Respuesta inesperada: ${response.status}`);
        } catch (error) {
            console.log(`‚ùå Error esperado: ${error.response?.status} - ${error.response?.data?.message}`);
        }
        console.log('');
    }
}

// Funci√≥n para mostrar informaci√≥n de los endpoints
function showEndpointInfo() {
    console.log('üìã INFORMACI√ìN DE LOS ENDPOINTS DE CAMBIO DE CONTRASE√ëA:\n');
    
    console.log('üë§ USUARIOS:');
    console.log('   PUT /auth/change-password');
    console.log('   Body: { id_usuario, contrasenaActual, nuevaContrasena }\n');
    
    console.log('üë®‚Äçüíº ADMINISTRADORES:');
    console.log('   PUT /auth/admin/change-password');
    console.log('   Body: { id_admin, contrasenaActual, nuevaContrasena }\n');
    
    console.log('üîí VALIDACIONES:');
    console.log('   ‚Ä¢ Contrase√±a actual debe ser correcta');
    console.log('   ‚Ä¢ Nueva contrase√±a m√≠nimo 8 caracteres');
    console.log('   ‚Ä¢ Nueva contrase√±a debe ser diferente a la actual');
    console.log('   ‚Ä¢ Todos los campos son requeridos\n');
    
    console.log('üìß CARACTER√çSTICAS:');
    console.log('   ‚Ä¢ Env√≠o de correo de confirmaci√≥n');
    console.log('   ‚Ä¢ Encriptaci√≥n segura (bcrypt saltRounds: 12)');
    console.log('   ‚Ä¢ Logs detallados para auditor√≠a');
    console.log('   ‚Ä¢ Validaci√≥n de fortaleza de contrase√±a\n');
}

// Ejecutar funciones seg√∫n argumentos
const action = process.argv[2];

if (action === 'user') {
    testChangePasswordUser();
} else if (action === 'admin') {
    testChangePasswordAdmin();
} else if (action === 'validations') {
    testValidations();
} else if (action === 'info') {
    showEndpointInfo();
} else {
    console.log('üîß USO DEL SCRIPT:\n');
    console.log('node test-change-password.js user         # Probar cambio usuario');
    console.log('node test-change-password.js admin        # Probar cambio admin');
    console.log('node test-change-password.js validations  # Probar validaciones');
    console.log('node test-change-password.js info         # Mostrar informaci√≥n');
    console.log('\nüí° NOTA: Ajusta los IDs y contrase√±as en el c√≥digo antes de ejecutar');
}
