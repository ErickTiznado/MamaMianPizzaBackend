const axios = require('axios');

// Configuraci√≥n
const BASE_URL = 'https://api.mamamianpizza.com/api'; // Cambia por tu URL

// Funci√≥n principal para probar el flujo completo de administradores
async function testPasswordResetFlowAdmin() {
    console.log('üß™ Iniciando pruebas del flujo de restablecimiento de contrase√±a para ADMINISTRADORES...\n');

    try {
        // Paso 1: Solicitar c√≥digo de restablecimiento para admin
        console.log('üìß Paso 1: Solicitando c√≥digo de restablecimiento para ADMINISTRADOR...');
        const resetRequest = await axios.post(`${BASE_URL}/auth/admin/request-reset`, {
            correo: 'admin@mamamianpizza.com' // Cambia por un correo que exista en tu tabla administradores
        });

        console.log('‚úÖ Respuesta:', resetRequest.data);
        console.log('üìß Revisa tu correo electr√≥nico para obtener el c√≥digo de administrador\n');

        // Esperar a que el usuario ingrese el c√≥digo
        const readline = require('readline');
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });

        const otp = await new Promise((resolve) => {
            rl.question('Ingresa el c√≥digo OTP de ADMINISTRADOR que recibiste por correo: ', (answer) => {
                rl.close();
                resolve(answer);
            });
        });

        // Paso 2: Verificar c√≥digo OTP para admin
        console.log('\nüîç Paso 2: Verificando c√≥digo OTP de ADMINISTRADOR...');
        const verifyRequest = await axios.post(`${BASE_URL}/auth/admin/verify-reset`, {
            correo: 'admin@mamamianpizza.com',
            otp: otp
        });

        console.log('‚úÖ Respuesta:', verifyRequest.data);
        const token = verifyRequest.data.token;

        // Paso 3: Cambiar contrase√±a de admin
        console.log('\nüîê Paso 3: Cambiando contrase√±a de ADMINISTRADOR...');
        const resetPassword = await axios.put(`${BASE_URL}/auth/admin/reset-password`, {
            token: token,
            nuevaContrasena: 'adminPassword123!'
        });

        console.log('‚úÖ Respuesta:', resetPassword.data);
        console.log('\nüéâ ¬°Flujo de ADMINISTRADOR completado exitosamente!');

    } catch (error) {
        console.error('‚ùå Error en la prueba de ADMINISTRADOR:');
        if (error.response) {
            console.error('Status:', error.response.status);
            console.error('Data:', error.response.data);
        } else {
            console.error('Error:', error.message);
        }
    }
}

// Funci√≥n para probar solo el paso 1 de admins
async function testRequestResetAdmin() {
    console.log('üìß Probando solo el env√≠o de c√≥digo para ADMINISTRADOR...\n');

    try {
        const response = await axios.post(`${BASE_URL}/auth/admin/request-reset`, {
            correo: 'admin@mamamianpizza.com' // Cambia por un correo v√°lido de administrador
        });

        console.log('‚úÖ C√≥digo de ADMINISTRADOR enviado exitosamente:');
        console.log(response.data);
    } catch (error) {
        console.error('‚ùå Error:', error.response?.data || error.message);
    }
}

// Funci√≥n para comparar flujos de usuario vs admin
async function compareUserVsAdminFlow() {
    console.log('üîÑ Comparando flujos de Usuario vs Administrador...\n');

    try {
        // Probar endpoint de usuario
        console.log('üë§ Probando endpoint de USUARIO...');
        const userResponse = await axios.post(`${BASE_URL}/auth/request-reset`, {
            correo: 'usuario@ejemplo.com'
        });
        console.log('Usuario response:', userResponse.data);

        // Probar endpoint de admin
        console.log('\nüë®‚Äçüíº Probando endpoint de ADMINISTRADOR...');
        const adminResponse = await axios.post(`${BASE_URL}/auth/admin/request-reset`, {
            correo: 'admin@mamamianpizza.com'
        });
        console.log('Admin response:', adminResponse.data);

    } catch (error) {
        console.error('‚ùå Error en comparaci√≥n:', error.response?.data || error.message);
    }
}

// Funci√≥n para probar validaciones espec√≠ficas de admin
async function testAdminValidations() {
    console.log('üîç Probando validaciones espec√≠ficas de ADMINISTRADOR...\n');

    const tests = [
        {
            name: 'Correo vac√≠o',
            data: {}
        },
        {
            name: 'Correo inv√°lido',
            data: { correo: 'correo-invalido' }
        },
        {
            name: 'Correo no registrado como admin',
            data: { correo: 'noexiste@admin.com' }
        }
    ];

    for (const test of tests) {
        try {
            console.log(`üß™ Probando: ${test.name}`);
            const response = await axios.post(`${BASE_URL}/auth/admin/request-reset`, test.data);
            console.log(`‚úÖ Respuesta inesperada: ${response.status}`);
        } catch (error) {
            console.log(`‚ùå Error esperado: ${error.response?.status} - ${error.response?.data?.message}`);
        }
        console.log('');
    }
}

// Funci√≥n de ayuda para mostrar las diferencias
function showAdminFeatures() {
    console.log('üìã CARACTER√çSTICAS DEL SISTEMA DE ADMINISTRADORES:\n');
    
    console.log('üîó ENDPOINTS:');
    console.log('   POST /auth/admin/request-reset  - Solicitar c√≥digo admin');
    console.log('   POST /auth/admin/verify-reset   - Verificar c√≥digo admin');
    console.log('   PUT  /auth/admin/reset-password - Cambiar contrase√±a admin\n');
    
    console.log('üé® TEMPLATES ESPEC√çFICOS:');
    console.log('   ‚Ä¢ Colores de administraci√≥n (marr√≥n/dorado)');
    console.log('   ‚Ä¢ Badge de "ADMINISTRADOR"');
    console.log('   ‚Ä¢ Warnings de seguridad espec√≠ficos');
    console.log('   ‚Ä¢ Informaci√≥n de contacto admin\n');
    
    console.log('üîí VALIDACIONES:');
    console.log('   ‚Ä¢ Tabla: administradores (no usuarios)');
    console.log('   ‚Ä¢ user_type: "administrador"');
    console.log('   ‚Ä¢ Encriptaci√≥n m√°s fuerte (saltRounds: 12)');
    console.log('   ‚Ä¢ Logs espec√≠ficos para admin\n');
    
    console.log('üìß CORREOS:');
    console.log('   ‚Ä¢ Subject espec√≠fico para admins');
    console.log('   ‚Ä¢ Templates con dise√±o corporativo');
    console.log('   ‚Ä¢ Informaci√≥n de seguridad adicional\n');
}

// Ejecutar funciones seg√∫n argumentos
const args = process.argv.slice(2);

if (args.includes('--full')) {
    testPasswordResetFlowAdmin();
} else if (args.includes('--request-only')) {
    testRequestResetAdmin();
} else if (args.includes('--compare')) {
    compareUserVsAdminFlow();
} else if (args.includes('--validations')) {
    testAdminValidations();
} else if (args.includes('--features')) {
    showAdminFeatures();
} else {
    console.log('üß™ SCRIPT DE PRUEBAS PARA ADMINISTRADORES - MAMA MIAN PIZZA\n');
    console.log('Uso:');
    console.log('  node test-password-reset-admin.js --full         # Flujo completo');
    console.log('  node test-password-reset-admin.js --request-only # Solo env√≠o de c√≥digo');
    console.log('  node test-password-reset-admin.js --compare      # Comparar user vs admin');
    console.log('  node test-password-reset-admin.js --validations  # Probar validaciones');
    console.log('  node test-password-reset-admin.js --features     # Mostrar caracter√≠sticas');
    console.log('\nPor defecto, ejecuta --features para mostrar informaci√≥n.');
    console.log('');
    showAdminFeatures();
}
