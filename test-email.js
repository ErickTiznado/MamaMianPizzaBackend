// Script para probar la configuraci√≥n de correo electr√≥nico
require('dotenv').config();

const { createTransporter, validateEmailConfig } = require('./config/emailConfig');
const { templatePasswordReset, templatePasswordChanged } = require('./config/emailTemplates');

// Colores para el terminal
const colors = {
    reset: '\x1b[0m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m'
};

const log = (message, color = 'reset') => {
    console.log(`${colors[color]}${message}${colors.reset}`);
};

// Funci√≥n para probar la configuraci√≥n
async function testEmailConfig() {
    log('\nüß™ PROBANDO CONFIGURACI√ìN DE CORREO ELECTR√ìNICO\n', 'cyan');
    
    try {
        // 1. Validar variables de entorno
        log('üìã Paso 1: Validando variables de entorno...', 'blue');
        validateEmailConfig();
        log('‚úÖ Variables de entorno v√°lidas', 'green');
        
        // Mostrar configuraci√≥n (sin mostrar la contrase√±a)
        log(`   üìß EMAIL_USER: ${process.env.EMAIL_USER}`, 'blue');
        log(`   üîß EMAIL_PROVIDER: ${process.env.EMAIL_PROVIDER || 'gmail'}`, 'blue');
        log(`   üìù EMAIL_FROM_NAME: ${process.env.EMAIL_FROM_NAME || 'Mama Mian Pizza'}`, 'blue');
        
        // 2. Crear transporter
        log('\nüì° Paso 2: Creando conexi√≥n de correo...', 'blue');
        const transporter = createTransporter();
        log('‚úÖ Transporter creado exitosamente', 'green');
        
        // 3. Verificar conexi√≥n
        log('\nüîç Paso 3: Verificando conexi√≥n con el servidor...', 'blue');
        await transporter.verify();
        log('‚úÖ Conexi√≥n verificada exitosamente', 'green');
        
        // 4. Preguntar si enviar correo de prueba
        const readline = require('readline');
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        
        const shouldSendTest = await new Promise((resolve) => {
            rl.question('\nüì® ¬øQuieres enviar un correo de prueba? (s/n): ', (answer) => {
                rl.close();
                resolve(answer.toLowerCase() === 's' || answer.toLowerCase() === 'y');
            });
        });
        
        if (shouldSendTest) {
            const rl2 = readline.createInterface({
                input: process.stdin,
                output: process.stdout
            });
            
            const testEmail = await new Promise((resolve) => {
                rl2.question('üìß Ingresa tu correo para la prueba: ', (answer) => {
                    rl2.close();
                    resolve(answer);
                });
            });
            
            // 5. Enviar correo de prueba
            log('\nüìÆ Paso 4: Enviando correo de prueba...', 'blue');
            
            const testOTP = '123456';
            const htmlContent = templatePasswordReset('Usuario de Prueba', testOTP, 10);
            
            const mailOptions = {
                from: {
                    name: process.env.EMAIL_FROM_NAME || 'Mama Mian Pizza',
                    address: process.env.EMAIL_FROM_ADDRESS || process.env.EMAIL_USER
                },
                to: testEmail,
                subject: 'üß™ PRUEBA - Configuraci√≥n de Correo - Mama Mian Pizza',
                html: htmlContent,
                text: `
Esto es una prueba de configuraci√≥n de correo electr√≥nico.

Tu c√≥digo de prueba es: ${testOTP}

Si recibes este correo, la configuraci√≥n est√° funcionando correctamente.

Saludos,
Equipo de Mama Mian Pizza (Prueba)
                `.trim()
            };
            
            const info = await transporter.sendMail(mailOptions);
            
            log(`‚úÖ Correo de prueba enviado exitosamente`, 'green');
            log(`   üìß Destinatario: ${testEmail}`, 'blue');
            log(`   üÜî Message ID: ${info.messageId}`, 'blue');
            log(`   üìä Response: ${info.response}`, 'blue');
            
            log('\nüì¨ Revisa tu bandeja de entrada (y spam) para ver el correo de prueba', 'yellow');
        }
        
        log('\nüéâ ¬°CONFIGURACI√ìN DE CORREO COMPLETADA EXITOSAMENTE!', 'green');
        log('\nüìã Resumen:', 'cyan');
        log('   ‚úÖ Variables de entorno configuradas', 'green');
        log('   ‚úÖ Conexi√≥n al servidor de correo establecida', 'green');
        log('   ‚úÖ Plantillas de correo funcionando', 'green');
        
        if (shouldSendTest) {
            log('   ‚úÖ Correo de prueba enviado', 'green');
        }
        
        log('\nüöÄ Tu sistema est√° listo para enviar correos de restablecimiento de contrase√±a!', 'green');
        
    } catch (error) {
        log(`\n‚ùå ERROR EN LA CONFIGURACI√ìN:`, 'red');
        log(`   ${error.message}`, 'red');
        
        // Gu√≠a de soluci√≥n de problemas
        log('\nüîß POSIBLES SOLUCIONES:', 'yellow');
        
        if (error.message.includes('Invalid login')) {
            log('   ‚Ä¢ Verifica que EMAIL_USER y EMAIL_PASS est√©n correctos', 'yellow');
            log('   ‚Ä¢ Aseg√∫rate de usar una contrase√±a de aplicaci√≥n (no la personal)', 'yellow');
            log('   ‚Ä¢ Verifica que la verificaci√≥n en 2 pasos est√© activada en Gmail', 'yellow');
        } else if (error.message.includes('connect') || error.message.includes('timeout')) {
            log('   ‚Ä¢ Verifica tu conexi√≥n a internet', 'yellow');
            log('   ‚Ä¢ Intenta cambiar EMAIL_PROVIDER a "outlook" o "yahoo"', 'yellow');
            log('   ‚Ä¢ Revisa si tu firewall bloquea el puerto 587', 'yellow');
        } else if (error.message.includes('requeridos')) {
            log('   ‚Ä¢ Crea un archivo .env en la ra√≠z del proyecto', 'yellow');
            log('   ‚Ä¢ Agrega EMAIL_USER=tu-email@gmail.com', 'yellow');
            log('   ‚Ä¢ Agrega EMAIL_PASS=tu-contrase√±a-de-aplicacion', 'yellow');
        }
        
        log('\nüìñ Consulta EMAIL-SETUP.md para instrucciones detalladas', 'blue');
        
        process.exit(1);
    }
}

// Funci√≥n para mostrar ayuda
function showHelp() {
    log('\nüìß UTILIDAD DE PRUEBA DE CORREO ELECTR√ìNICO\n', 'cyan');
    log('Uso:', 'blue');
    log('  node test-email.js          # Probar configuraci√≥n completa', 'yellow');
    log('  node test-email.js help     # Mostrar esta ayuda', 'yellow');
    log('\nEste script verifica:', 'blue');
    log('  ‚úì Variables de entorno', 'green');
    log('  ‚úì Conexi√≥n al servidor de correo', 'green');
    log('  ‚úì Env√≠o de correo de prueba', 'green');
    log('  ‚úì Plantillas HTML', 'green');
    log('\nüìñ Para configurar: consulta EMAIL-SETUP.md\n', 'blue');
}

// Ejecutar seg√∫n argumentos
const action = process.argv[2];

if (action === 'help' || action === '--help' || action === '-h') {
    showHelp();
} else {
    testEmailConfig().catch(console.error);
}
